package coms6998.fall2016.models.dynamodb;

import java.util.Date;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperFieldModel.DynamoDBAttributeType;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTyped;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBVersionAttribute;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

@DynamoDBTable(tableName = "__NO_TABLE_NAME__")
public abstract class ContentDynamoDBModel {

	@JsonProperty(value = "ID") private String id;
	@JsonProperty(value = "UUID") private String uuid;
	@JsonProperty(value = "Name") private String name;
	@JsonProperty(value = "IsDeleted") private boolean isDeleted;
	@JsonProperty(value = "Version") private Long version;
	@JsonProperty(value = "CreatedOnTimestamp") private Date createdOnTimestamp;
	@JsonProperty(value = "UpdatedOnTimestamp") private Date updatedOnTimestamp;
	private String ref; // should overwrite

	@DynamoDBHashKey(attributeName = "ID")
	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	@DynamoDBAttribute(attributeName = "UUID")
    @DynamoDBAutoGeneratedKey
	public String getUUID() {
		return uuid;
	}

	public void setUUID(String uuid) {
		this.uuid = uuid;
	}

	@DynamoDBAttribute(attributeName = "Name")
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@DynamoDBAttribute(attributeName = "IsDeleted")
	@DynamoDBTyped(DynamoDBAttributeType.BOOL)
	public boolean getIsDeleted() {
		return isDeleted;
	}

	public void setIsDeleted(boolean isDeleted) {
		this.isDeleted = isDeleted;
	}

	@DynamoDBAttribute(attributeName = "CreatedOnTimestamp")
	public Date getCreatedOnTimestamp() {
		return createdOnTimestamp;
	}

	public void setCreatedOnTimestamp(Date createdOnTimestamp) {
		this.createdOnTimestamp = createdOnTimestamp;
	}

	@DynamoDBAttribute(attributeName = "UpdatedOnTimestamp")
	public Date getUpdatedOnTimestamp() {
		return updatedOnTimestamp;
	}

	public void setUpdatedOnTimestamp(Date updatedOnTimestamp) {
		this.updatedOnTimestamp = updatedOnTimestamp;
	}
	
	@DynamoDBAttribute(attributeName = "__REF__")
	public String getRef() {
		return ref;
	}

	public void setRef(String ref) {
		this.ref = ref;
	}

	@DynamoDBVersionAttribute(attributeName = "Version")
	public Long getVersion() {
		return version;
	}

	public void setVersion(Long version) {
		this.version = version;
	}

	/**
	 * Merges this with an old instance of ContentDynamoDBModel.
	 * Does so by updating null fields to the values in oldContent.
	 * Slightly dodgy.
	 * @param oldContent old content to update.
	 * @return
	 */
	public ContentDynamoDBModel updateFromNew(ContentDynamoDBModel newContent) {
		this.name = newContent.getName() == null ? this.name : newContent.getName();
		this.updatedOnTimestamp = new Date();
		return this;
	}
	
	public String toString() {
		ObjectMapper mapper = new ObjectMapper();
		try {
			return mapper.writeValueAsString(this);
		} catch (JsonProcessingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return name;
	}

}
